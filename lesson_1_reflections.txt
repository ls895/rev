How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  Viewing diff can narrow down the scope that I need to cover in order to find
  out the bug. Diff provides a direct visual comparison between up and down or
  left and right to spot tiny details and errors.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

  I will know on a grand scheme how my file evolved over time that can indicate
  a change in programming direction, addition and removal of features, bug
  fixes, etc. Moreover, even the smallest change over the smallest detail will
  be present under a version control system so I can more effectively view the
  exact detail and discover bugs for example of my edits over the entire range
  of the file history

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?

  Pros: Users have flexible and logical controls over when they want to commit a
  change.

  Cons: If the editor/ development environment does not provide backups or
  autosaves on files the progress could be lost if there are sudden crashes and
  progress are not recoverable.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  VCSs like Google Docs treat files separately as most users of these service do
  not put associations or technical links between files and they use the
  services mostly for storage, sharing and text editing, etc. But for Git,
  source codes for applications and websites usually require several files
  linked together in order to work properly, so multiple files in one commit and
  properly provide revision controls for application development.

How can you use the commands git log and git diff to view the history of files?

  git log displays all the previous revisions of the file. I can know the commit
  IDs and the commit descriptions of each of the revisions. git diff compare 2
  commits and find out where and what texts are being edited across all the
  files between the 2 commits.

How might using version control make you more confident to make changes that
could break something?

  Before you make the changes, make a new commit for your current state. Then no
  matter what you do with the codes, you can always revert back to the last
  commit that you made simply by checking it out using git checkout.

Now that you have your workspace set up, what do you want to try using Git for?

  Committing my first version of reflections.txt, Trying out git diff, git log,
  git checkout functions, Actually to start programming something
